// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
import './screen-reader.css';

document.addEventListener('DOMContentLoaded', function () {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (window.speechSynthesis) {
    window.speechSynthesis.cancel();
  }

  let isReadingMode = false;
  let utterance = null;
  let currentHighlight = null;
  let wasReadingMode = false;
  const excludedSelectors = 'nav, menu, footer, script, style, .menu, .navbar, [aria-hidden="true"]';

  // –≠–ª–µ–º–µ–Ω—Ç—ã UI
  const toggleBtn = document.getElementById('screen-reader-toggle');
  const controlsDiv = document.getElementById('screen-reader-controls');
  const playBtn = document.getElementById('screen-reader-play');
  const pauseBtn = document.getElementById('screen-reader-pause');
  const stopBtn = document.getElementById('screen-reader-stop');

  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  controlsDiv.style.display = 'flex';

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —á—Ç–µ–Ω–∏—è
  toggleBtn.addEventListener('click', function () {
    isReadingMode = !isReadingMode;
    toggleBtn.textContent = isReadingMode ? 'üîá –í—ã–∫–ª—é—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ' : 'üîä –í–∫–ª—é—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ';

    if (!isReadingMode) {
      stopReading();
      removeHighlight();
    }
  });

  // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
  playBtn.addEventListener('click', function () {
    // –ï—Å–ª–∏ —Ä–µ—á—å –Ω–∞ –ø–∞—É–∑–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º
    if (window.speechSynthesis && window.speechSynthesis.paused) {
      window.speechSynthesis.resume();
      return;
    }
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –±—ã–ª –ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    wasReadingMode = isReadingMode;
    isReadingMode = false;
    toggleBtn.textContent = 'üîä –í–∫–ª—é—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ';
    removeHighlight();

    const mainContent = document.body.cloneNode(true);
    mainContent.querySelectorAll(excludedSelectors).forEach(el => el.remove());
    const text = mainContent.innerText.trim().replace(/\s+/g, ' ');
    speakText(text, function () {
      // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–∫–ª—é—á–∏–ª –µ–≥–æ –≤—Ä—É—á–Ω—É—é
      if (wasReadingMode) {
        isReadingMode = true;
        toggleBtn.textContent = 'üîá –í—ã–∫–ª—é—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ';
      }
    });
  });

  pauseBtn.addEventListener('click', function () {
    if (window.speechSynthesis) {
      window.speechSynthesis.pause();
    }
  });

  stopBtn.addEventListener('click', stopReading);

  // –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (—Å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ)
  document.addEventListener('mouseover', function (e) {
    if (!isReadingMode) return;

    const target = e.target.closest('p, h1, h2, h3, h4, h5, h6, div, span, li, a, button'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (!target || target.matches(excludedSelectors) || !target.innerText.trim()) return;

    // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    removeHighlight();

    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
    target.classList.add('highlight-text');
    currentHighlight = target;

    // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —á—Ç–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
    stopReading();
    speakText(target.innerText.trim());
  });

  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
  document.addEventListener('mouseout', function (e) {
    if (currentHighlight && (!e.relatedTarget || !currentHighlight.contains(e.relatedTarget))) {
      removeHighlight();
    }
  });

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—á–∏ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  function speakText(text, onEndCallback) {
    if (!window.speechSynthesis) {
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏!');
      return;
    }
    utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    if (typeof onEndCallback === 'function') {
      utterance.onend = onEndCallback;
    } else {
      utterance.onend = null;
    }
    window.speechSynthesis.speak(utterance);
  }

  function stopReading() {
    if (window.speechSynthesis) {
      window.speechSynthesis.cancel();
    }
  }

  function removeHighlight() {
    if (currentHighlight) {
      currentHighlight.classList.remove('highlight-text');
      currentHighlight = null;
    }
  }
});